affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - my-app
            topologyKey: topology.kubernetes.io/zone


# Services with ports
kubectl get svc --all-namespaces -o custom-columns="NAME:.metadata.name,NAMESPACE:.metadata.namespace,URL:.metadata.name\.\.metadata.namespace\.svc\.cluster\.local,PORT:.spec.ports[0].port" --no-headers

kubectl get svc --all-namespaces -o jsonpath='{range .items[*]}{.metadata.name}.{.metadata.namespace}.svc.cluster.local:{.spec.ports[0].port}{"\n"}{end}'
2. All Ports for Each Service

bash
kubectl get svc --all-namespaces -o json | jq -r '.items[] | .metadata.name as $svc | .metadata.namespace as $ns | .spec.ports[] | "\($svc).\($ns).svc.cluster.local:\(.port)"'
3. With Service and Port Names

bash
kubectl get svc --all-namespaces -o json | jq -r '.items[] | .metadata.name as $svc | .metadata.namespace as $ns | .spec.ports[] | "\($svc).\($ns).svc.cluster.local:\(.port) (port: \(.name))"'



ubectl get pods --all-namespaces --field-selector=status.phase=Running -o json | jq -r '.items[] | select(.spec.containers[].ports[]?.containerPort? == 8080 or .spec.containers[].ports[]?.containerPort? == 8081) | "\(.metadata.namespace) \(.metadata.name)"' | while read ns pod; do echo "=== $ns/$pod ===" && kubectl exec -n $ns $pod -- sh -c 'curl -s http://localhost:8080/actuator/mappings 2>/dev/null | jq -r ".. | .patterns? // empty" | grep -v null | sort -u' 2>/dev/null || echo "No actuator mappings"; done
2. Optimized Version with Error Handling

bash
kubectl get pods --all-namespaces --field-selector=status.phase=Running -o json | jq -r '.items[] | "\(.metadata.namespace) \(.metadata.name)"' | while read ns pod; do echo "=== Extracting from $ns/$pod ===" && kubectl exec -n $ns $pod -- timeout 10 sh -c 'curl -s -f http://localhost:8080/actuator/mappings 2>/dev/null | jq -r ".. | .patterns? // empty" | grep -v null | sort -u' 2>/dev/null || echo "No accessible endpoints"; done
3. Only Spring Boot Apps (With App Label Filter)

bash
kubectl get pods --all-namespaces -l app.kubernetes.io/name -o json | jq -r '.items[] | "\(.metadata.namespace) \(.metadata.name)"' | while read ns pod; do echo "=== $ns/$pod ===" && kubectl exec -n $ns $pod -- sh -c 'curl -s http://localhost:8080/actuator/mappings 2>/dev/null | jq -r ".. | .patterns? // empty" | grep -v null | sort -u' 2>/dev/null | head -10; done

