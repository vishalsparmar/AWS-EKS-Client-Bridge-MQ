bash
#!/bin/bash
NAMESPACE="${1:-default}"
TEMP_FILE=$(mktemp)

echo "=== Pod AZ Distribution in namespace: $NAMESPACE ==="

# Get all pods and their nodes, then find AZ for each
kubectl get pods -n "$NAMESPACE" -o wide | awk 'NR>1 && $7 != "<none>" {print $7}' | while read node; do
  kubectl get node "$node" -o jsonpath='{.metadata.labels.topology\.kubernetes\.io/zone}' 2>/dev/null
  echo  # Add newline
done > "$TEMP_FILE"

# Count and display results
sort "$TEMP_FILE" | uniq -c
rm -f "$TEMP_FILE"
Option 2: Single Command with Process Substitution

bash
#!/bin/bash
NAMESPACE="${1:-default}"
echo "=== Pod AZ Distribution in namespace: $NAMESPACE ==="
sort <(kubectl get pods -n "$NAMESPACE" -o wide | awk 'NR>1 && $7 != "<none>" {print $7}' | while read node; do kubectl get node "$node" -o jsonpath='{.metadata.labels.topology\.kubernetes\.io/zone}' 2>/dev/null && echo; done) | uniq -c
Option 3: Pure Awk Solution (No Subshell Issues)

bash
#!/bin/bash
NAMESPACE="${1:-default}"
echo "=== Pod AZ Distribution in namespace: $NAMESPACE ==="

kubectl get pods -n "$NAMESPACE" -o wide | awk '
BEGIN {
  # Initialize array
  delete az_count
}
NR>1 && $7 != "<none>" {
  node = $7
  # Build kubectl command
  cmd = "kubectl get node \"" node "\" -o jsonpath='"'"'{.metadata.labels.topology\\.kubernetes\\.io/zone}'"'"' 2>/dev/null"
  # Execute command and read result
  if ((cmd | getline az) > 0) {
    az_count[az]++
  }
  close(cmd)
}
END {
  # Print results
  for (az in az_count) {
    printf "%3d %s\n", az_count[az], az
  }
}'
Option 4: Debugging Version (See What's Happening)

bash
#!/bin/bash
NAMESPACE="${1:-default}"
echo "=== Debug Pod AZ Distribution in namespace: $NAMESPACE ==="

# Step 1: Show all nodes found
echo "1. Nodes found:"
kubectl get pods -n "$NAMESPACE" -o wide | awk 'NR>1 && $7 != "<none>" {print $7}'

# Step 2: Show AZ for each node
echo -e "\n2. AZ for each node:"
kubectl get pods -n "$NAMESPACE" -o wide | awk 'NR>1 && $7 != "<none>" {print $7}' | while read node; do
  az=$(kubectl get node "$node" -o jsonpath='{.metadata.labels.topology\.kubernetes\.io/zone}' 2>/dev/null)
  echo "Node: $node -> AZ: $az"
done

# Step 3: Final count
echo -e "\n3. Final AZ Distribution:"
TEMP_FILE=$(mktemp)
kubectl get pods -n "$NAMESPACE" -o wide | awk 'NR>1 && $7 != "<none>" {print $7}' | while read node; do
  kubectl get node "$node" -o jsonpath='{.metadata.labels.topology\.kubernetes\.io/zone}' 2>/dev/null
  echo
done > "$TEMP_FILE"
sort "$TEMP_FILE" | uniq -c
rm -f "$TEMP_FILE"
Option 5: One-liner That Actually Works

bash
kubectl get pods -n <namespace> -o wide | tail -n +2 | awk '$7 != "<none>" {print $7}' | xargs -I {} sh -c 'kubectl get node "$1" -o jsonpath='"'"'{.metadata.labels.topology\.kubernetes\.io/zone}'"'"' 2>/dev/null && echo' _ {} | sort | uniq -c
Usage:

bash
# Make executable
chmod +x pod-az-distribution.sh

# Run for specific namespace
./pod-az-distribution.sh default
./pod-az-distribution.sh production

# Or use the one-liner directly
kubectl get pods -n default -o wide | tail -n +2 | awk '$7 != "<none>" {print $7}' | xargs -I {} sh -c 'kubectl get node "$1" -o jsonpath='\''{.metadata.labels.topology\.kubernetes\.io/zone}'\'' 2/de2>/dev/null && echo' _ {} | sort | uniq -c
Try This First (Simple Test):

bash
# Test if you can see multiple nodes
kubectl get pods -n <namespace> -o wide | awk 'NR>1 && $7 != "<none>" {print $7}' | head -5

# Test if you can get AZ for multiple nodes
kubectl get pods -n <namespace> -o wide | awk 'NR>1 && $7 != "<none>" {print $7}' | head -3 | while read node; do
  echo "Node: $node"
  kubectl get node "$node" -o jsonpath='{.metadata.labels.topology\.kubernetes\.io/zone}' 2>/dev/null
  echo "---"
done
Use Option 1 - it's the most reliable and will definitely show all AZs! The temporary file approach avoids all subshell issues.

