Install-WindowsFeature -Name Telnet-Client
Test-NetConnection -ComputerName "hostname_or_ip" -Port 80

bash
# Deployments with spec.replicas > 0
kubectl get deployments -A -o jsonpath='{range .items[?(@.spec.replicas>0)]}{.metadata.namespace}{"\t"}{.metadata.name}{"\t"}{.spec.replicas}{"\n"}{end}'
2. With Headers (Better Readability)

bash
# With column headers
echo -e "NAMESPACE\tDEPLOYMENT\tREPLICAS" && kubectl get deployments -A -o jsonpath='{range .items[?(@.spec.replicas>0)]}{.metadata.namespace}{"\t"}{.metadata.name}{"\t"}{.spec.replicas}{"\n"}{end}' | column -t
3. Including Ready Replicas

bash
# Show both desired and ready replicas
echo -e "NAMESPACE\tDEPLOYMENT\tDESIRED\tREADY" && kubectl get deployments -A -o jsonpath='{range .items[?(@.spec.replicas>0)]}{.metadata.namespace}{"\t"}{.metadata.name}{"\t"}{.spec.replicas}{"\t"}{.status.readyReplicas}{"\n"}{end}' | column -t
4. Custom Columns Approach

bash
# Using custom columns and awk
kubectl get deployments -A -o custom-columns="NAMESPACE:.metadata.namespace,NAME:.metadata.name,REPLICAS:.spec.replicas" --no-headers | awk '$3 > 0'
Find ReplicaSets with Replicas > 0

5. ReplicaSets with Replicas

bash
# ReplicaSets with replicas > 0
kubectl get replicasets -A -o jsonpath='{range .items[?(@.spec.replicas>0)]}{.metadata.namespace}{"\t"}{.metadata.name}{"\t"}{.spec.replicas}{"\n"}{end}'
Most Practical Commands

6. One-Liner for Daily Use

bash
# Clean output with headers
{ echo -e "NAMESPACE\tDEPLOYMENT\tREPLICAS"; kubectl get deployments -A -o jsonpath='{range .items[?(@.spec.replicas>0)]}{.metadata.namespace}{"\t"}{.metadata.name}{"\t"}{.spec.replicas}{"\n"}{end}'; } | column -t
7. For Specific Namespace

bash
# In default namespace only
kubectl get deployments -o jsonpath='{range .items[?(@.spec.replicas>0)]}{.metadata.name}{"\t"}{.spec.replicas}{"\n"}{end}'

# In specific namespace
kubectl get deployments -n your-namespace -o jsonpath='{range .items[?(@.spec.replicas>0)]}{.metadata.name}{"\t"}{.spec.replicas}{"\n"}{end}'
Advanced Filtering

8. With Additional Status Info

bash
# Include availability status
echo -e "NAMESPACE\tDEPLOYMENT\tDESIRED\tREADY\tAVAILABLE" && kubectl get deployments -A -o jsonpath='{range .items[?(@.spec.replicas>0)]}{.metadata.namespace}{"\t"}{.metadata.name}{"\t"}{.spec.replicas}{"\t"}{.status.readyReplicas}{"\t"}{.status.availableReplicas}{"\n"}{end}' | column -t
9. Sort by Replica Count

bash
# Sort by number of replicas (highest first)
{ echo -e "NAMESPACE\tDEPLOYMENT\tREPLICAS"; kubectl get deployments -A -o jsonpath='{range .items[?(@.spec.replicas>0)]}{.metadata.namespace}{"\t"}{.metadata.name}{"\t"}{.spec.replicas}{"\n"}{end}'; } | sort -k3 -nr | column -t
Best Command for Quick Check

10. Simple and Effective

bash
kubectl get deployments -A -o jsonpath='{range .items[?(@.spec.replicas>0)]}{.metadata.namespace}/{.metadata.name}: {.spec.replicas} replicas{"\n"}{end}'
Command #2 is probably the most useful - it gives you a clean table with headers showing all deployments across all namespaces that have replicas configured (greater than 0).





Here are 2 simple commands - one to verify cordon, one to verify uncordon:

# Normal delete first
kubectl delete namespace test-env

# If stuck, force delete
kubectl patch namespace test-env -p '{"metadata":{"finalizers":[]}}' --type=merge


# Replace "stuck-namespace" with your actual namespace name
kubectl get namespace stuck-namespace -o json | \
  jq 'del(.spec.finalizers)' | \
  kubectl replace --raw "/api/v1/namespaces/stuck-namespace/finalize" -f -


1. Verify Cordon Command

bash
# Check if nodes in eu-west-2c are cordoned (should show 'true')
kubectl get nodes -l topology.kubernetes.io/zone=eu-west-2c -o custom-columns="NAME:.metadata.name,CORDONED:.spec.unschedulable"
Expected output when CORRECTLY CORDONED:

text
NAME                                          CORDONED
ip-10-0-1-100.eu-west-2c.compute.internal    true
ip-10-0-1-101.eu-west-2c.compute.internal    true
2. Verify Uncordon Command

bash
# Check if nodes in eu-west-2c are uncordoned (should show 'false' or '<none>')
kubectl get nodes -l topology.kubernetes.io/zone=eu-west-2c -o custom-columns="NAME:.metadata.name,CORDONED:.spec.unschedulable"
Expected output when CORRECTLY UNCORDONED:

text
NAME                                          CORDONED
ip-10-0-1-100.eu-west-2c.compute.internal    false
ip-10-0-1-101.eu-west-2c.compute.internal    false
Quick Interpretation:

true = Cordoned (no new pods)
false or <none> = Uncordoned (accepting new pods)
These two commands give you immediate visual confirmation of whether your cordon/uncordon operations worked correctly.
