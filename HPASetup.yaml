Here are 2 simple commands - one to verify cordon, one to verify uncordon:

# Normal delete first
kubectl delete namespace test-env

# If stuck, force delete
kubectl patch namespace test-env -p '{"metadata":{"finalizers":[]}}' --type=merge


# Replace "stuck-namespace" with your actual namespace name
kubectl get namespace stuck-namespace -o json | \
  jq 'del(.spec.finalizers)' | \
  kubectl replace --raw "/api/v1/namespaces/stuck-namespace/finalize" -f -


1. Verify Cordon Command

bash
# Check if nodes in eu-west-2c are cordoned (should show 'true')
kubectl get nodes -l topology.kubernetes.io/zone=eu-west-2c -o custom-columns="NAME:.metadata.name,CORDONED:.spec.unschedulable"
Expected output when CORRECTLY CORDONED:

text
NAME                                          CORDONED
ip-10-0-1-100.eu-west-2c.compute.internal    true
ip-10-0-1-101.eu-west-2c.compute.internal    true
2. Verify Uncordon Command

bash
# Check if nodes in eu-west-2c are uncordoned (should show 'false' or '<none>')
kubectl get nodes -l topology.kubernetes.io/zone=eu-west-2c -o custom-columns="NAME:.metadata.name,CORDONED:.spec.unschedulable"
Expected output when CORRECTLY UNCORDONED:

text
NAME                                          CORDONED
ip-10-0-1-100.eu-west-2c.compute.internal    false
ip-10-0-1-101.eu-west-2c.compute.internal    false
Quick Interpretation:

true = Cordoned (no new pods)
false or <none> = Uncordoned (accepting new pods)
These two commands give you immediate visual confirmation of whether your cordon/uncordon operations worked correctly.
